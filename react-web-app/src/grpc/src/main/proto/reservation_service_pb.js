/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.reservations.v1.CreateReservationRequest', null, global);
goog.exportSymbol('proto.reservations.v1.CreateReservationResponse', null, global);
goog.exportSymbol('proto.reservations.v1.DeleteReservationRequest', null, global);
goog.exportSymbol('proto.reservations.v1.GetReservationRequest', null, global);
goog.exportSymbol('proto.reservations.v1.ListReservationsRequest', null, global);
goog.exportSymbol('proto.reservations.v1.ListReservationsRequest.Attendees', null, global);
goog.exportSymbol('proto.reservations.v1.Person', null, global);
goog.exportSymbol('proto.reservations.v1.Reservation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.Reservation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reservations.v1.Reservation.repeatedFields_, null);
};
goog.inherits(proto.reservations.v1.Reservation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.Reservation.displayName = 'proto.reservations.v1.Reservation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reservations.v1.Reservation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.Reservation.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.Reservation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.Reservation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.Reservation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    venue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    room: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attendeesList: jspb.Message.toObjectList(msg.getAttendeesList(),
    proto.reservations.v1.Person.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.Reservation}
 */
proto.reservations.v1.Reservation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.Reservation;
  return proto.reservations.v1.Reservation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.Reservation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.Reservation}
 */
proto.reservations.v1.Reservation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = new proto.reservations.v1.Person;
      reader.readMessage(value,proto.reservations.v1.Person.deserializeBinaryFromReader);
      msg.addAttendees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.Reservation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.Reservation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.Reservation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.Reservation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVenue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttendeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.reservations.v1.Person.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.reservations.v1.Reservation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reservations.v1.Reservation.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.reservations.v1.Reservation.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.reservations.v1.Reservation.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string venue = 3;
 * @return {string}
 */
proto.reservations.v1.Reservation.prototype.getVenue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.reservations.v1.Reservation.prototype.setVenue = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string room = 4;
 * @return {string}
 */
proto.reservations.v1.Reservation.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.reservations.v1.Reservation.prototype.setRoom = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.reservations.v1.Reservation.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.reservations.v1.Reservation.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Person attendees = 6;
 * @return {!Array.<!proto.reservations.v1.Person>}
 */
proto.reservations.v1.Reservation.prototype.getAttendeesList = function() {
  return /** @type{!Array.<!proto.reservations.v1.Person>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.reservations.v1.Person, 6));
};


/** @param {!Array.<!proto.reservations.v1.Person>} value */
proto.reservations.v1.Reservation.prototype.setAttendeesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.reservations.v1.Person=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reservations.v1.Person}
 */
proto.reservations.v1.Reservation.prototype.addAttendees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.reservations.v1.Person, opt_index);
};


proto.reservations.v1.Reservation.prototype.clearAttendeesList = function() {
  this.setAttendeesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.Person.displayName = 'proto.reservations.v1.Person';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.Person} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.Person}
 */
proto.reservations.v1.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.Person;
  return proto.reservations.v1.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.Person}
 */
proto.reservations.v1.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.Person.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.Person} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.Person.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string ssn = 1;
 * @return {string}
 */
proto.reservations.v1.Person.prototype.getSsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reservations.v1.Person.prototype.setSsn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string firstName = 2;
 * @return {string}
 */
proto.reservations.v1.Person.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.reservations.v1.Person.prototype.setFirstname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string lastName = 3;
 * @return {string}
 */
proto.reservations.v1.Person.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.reservations.v1.Person.prototype.setLastname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.CreateReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.CreateReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.CreateReservationRequest.displayName = 'proto.reservations.v1.CreateReservationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.CreateReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.CreateReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.CreateReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.CreateReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservation: (f = msg.getReservation()) && proto.reservations.v1.Reservation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.CreateReservationRequest}
 */
proto.reservations.v1.CreateReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.CreateReservationRequest;
  return proto.reservations.v1.CreateReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.CreateReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.CreateReservationRequest}
 */
proto.reservations.v1.CreateReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.reservations.v1.Reservation;
      reader.readMessage(value,proto.reservations.v1.Reservation.deserializeBinaryFromReader);
      msg.setReservation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.CreateReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.CreateReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.CreateReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.CreateReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reservations.v1.Reservation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reservation reservation = 2;
 * @return {?proto.reservations.v1.Reservation}
 */
proto.reservations.v1.CreateReservationRequest.prototype.getReservation = function() {
  return /** @type{?proto.reservations.v1.Reservation} */ (
    jspb.Message.getWrapperField(this, proto.reservations.v1.Reservation, 2));
};


/** @param {?proto.reservations.v1.Reservation|undefined} value */
proto.reservations.v1.CreateReservationRequest.prototype.setReservation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.reservations.v1.CreateReservationRequest.prototype.clearReservation = function() {
  this.setReservation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reservations.v1.CreateReservationRequest.prototype.hasReservation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.CreateReservationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.CreateReservationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.CreateReservationResponse.displayName = 'proto.reservations.v1.CreateReservationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.CreateReservationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.CreateReservationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.CreateReservationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.CreateReservationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservation: (f = msg.getReservation()) && proto.reservations.v1.Reservation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.CreateReservationResponse}
 */
proto.reservations.v1.CreateReservationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.CreateReservationResponse;
  return proto.reservations.v1.CreateReservationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.CreateReservationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.CreateReservationResponse}
 */
proto.reservations.v1.CreateReservationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reservations.v1.Reservation;
      reader.readMessage(value,proto.reservations.v1.Reservation.deserializeBinaryFromReader);
      msg.setReservation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.CreateReservationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.CreateReservationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.CreateReservationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.CreateReservationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reservations.v1.Reservation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reservation reservation = 1;
 * @return {?proto.reservations.v1.Reservation}
 */
proto.reservations.v1.CreateReservationResponse.prototype.getReservation = function() {
  return /** @type{?proto.reservations.v1.Reservation} */ (
    jspb.Message.getWrapperField(this, proto.reservations.v1.Reservation, 1));
};


/** @param {?proto.reservations.v1.Reservation|undefined} value */
proto.reservations.v1.CreateReservationResponse.prototype.setReservation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.reservations.v1.CreateReservationResponse.prototype.clearReservation = function() {
  this.setReservation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reservations.v1.CreateReservationResponse.prototype.hasReservation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.GetReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.GetReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.GetReservationRequest.displayName = 'proto.reservations.v1.GetReservationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.GetReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.GetReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.GetReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.GetReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.GetReservationRequest}
 */
proto.reservations.v1.GetReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.GetReservationRequest;
  return proto.reservations.v1.GetReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.GetReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.GetReservationRequest}
 */
proto.reservations.v1.GetReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.GetReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.GetReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.GetReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.GetReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.reservations.v1.GetReservationRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reservations.v1.GetReservationRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.ListReservationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.ListReservationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.ListReservationsRequest.displayName = 'proto.reservations.v1.ListReservationsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.ListReservationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.ListReservationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.ListReservationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.ListReservationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    venue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    room: jspb.Message.getFieldWithDefault(msg, 3, ""),
    attendees: (f = msg.getAttendees()) && proto.reservations.v1.ListReservationsRequest.Attendees.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.ListReservationsRequest}
 */
proto.reservations.v1.ListReservationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.ListReservationsRequest;
  return proto.reservations.v1.ListReservationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.ListReservationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.ListReservationsRequest}
 */
proto.reservations.v1.ListReservationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoom(value);
      break;
    case 4:
      var value = new proto.reservations.v1.ListReservationsRequest.Attendees;
      reader.readMessage(value,proto.reservations.v1.ListReservationsRequest.Attendees.deserializeBinaryFromReader);
      msg.setAttendees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.ListReservationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.ListReservationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.ListReservationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.ListReservationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVenue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAttendees();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.reservations.v1.ListReservationsRequest.Attendees.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.ListReservationsRequest.Attendees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reservations.v1.ListReservationsRequest.Attendees.repeatedFields_, null);
};
goog.inherits(proto.reservations.v1.ListReservationsRequest.Attendees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.ListReservationsRequest.Attendees.displayName = 'proto.reservations.v1.ListReservationsRequest.Attendees';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reservations.v1.ListReservationsRequest.Attendees.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.ListReservationsRequest.Attendees.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.ListReservationsRequest.Attendees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.ListReservationsRequest.Attendees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.ListReservationsRequest.Attendees.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastnameList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.ListReservationsRequest.Attendees}
 */
proto.reservations.v1.ListReservationsRequest.Attendees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.ListReservationsRequest.Attendees;
  return proto.reservations.v1.ListReservationsRequest.Attendees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.ListReservationsRequest.Attendees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.ListReservationsRequest.Attendees}
 */
proto.reservations.v1.ListReservationsRequest.Attendees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.ListReservationsRequest.Attendees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.ListReservationsRequest.Attendees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.ListReservationsRequest.Attendees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.ListReservationsRequest.Attendees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastnameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string lastName = 1;
 * @return {!Array.<string>}
 */
proto.reservations.v1.ListReservationsRequest.Attendees.prototype.getLastnameList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.reservations.v1.ListReservationsRequest.Attendees.prototype.setLastnameList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.reservations.v1.ListReservationsRequest.Attendees.prototype.addLastname = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.reservations.v1.ListReservationsRequest.Attendees.prototype.clearLastnameList = function() {
  this.setLastnameList([]);
};


/**
 * optional string venue = 1;
 * @return {string}
 */
proto.reservations.v1.ListReservationsRequest.prototype.getVenue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reservations.v1.ListReservationsRequest.prototype.setVenue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timestamp = 2;
 * @return {string}
 */
proto.reservations.v1.ListReservationsRequest.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.reservations.v1.ListReservationsRequest.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string room = 3;
 * @return {string}
 */
proto.reservations.v1.ListReservationsRequest.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.reservations.v1.ListReservationsRequest.prototype.setRoom = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Attendees attendees = 4;
 * @return {?proto.reservations.v1.ListReservationsRequest.Attendees}
 */
proto.reservations.v1.ListReservationsRequest.prototype.getAttendees = function() {
  return /** @type{?proto.reservations.v1.ListReservationsRequest.Attendees} */ (
    jspb.Message.getWrapperField(this, proto.reservations.v1.ListReservationsRequest.Attendees, 4));
};


/** @param {?proto.reservations.v1.ListReservationsRequest.Attendees|undefined} value */
proto.reservations.v1.ListReservationsRequest.prototype.setAttendees = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.reservations.v1.ListReservationsRequest.prototype.clearAttendees = function() {
  this.setAttendees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reservations.v1.ListReservationsRequest.prototype.hasAttendees = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reservations.v1.DeleteReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reservations.v1.DeleteReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reservations.v1.DeleteReservationRequest.displayName = 'proto.reservations.v1.DeleteReservationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reservations.v1.DeleteReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reservations.v1.DeleteReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reservations.v1.DeleteReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.DeleteReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reservations.v1.DeleteReservationRequest}
 */
proto.reservations.v1.DeleteReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reservations.v1.DeleteReservationRequest;
  return proto.reservations.v1.DeleteReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reservations.v1.DeleteReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reservations.v1.DeleteReservationRequest}
 */
proto.reservations.v1.DeleteReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reservations.v1.DeleteReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reservations.v1.DeleteReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reservations.v1.DeleteReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reservations.v1.DeleteReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.reservations.v1.DeleteReservationRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reservations.v1.DeleteReservationRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.reservations.v1);
